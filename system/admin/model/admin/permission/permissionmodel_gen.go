// Code generated by goctl. DO NOT EDIT!

package permission

import (
    "context"
    "database/sql"
    "fmt"
    "strings"
    "time"

    "github.com/zeromicro/go-zero/core/stores/builder"
    "github.com/zeromicro/go-zero/core/stores/sqlc"
    "github.com/zeromicro/go-zero/core/stores/sqlx"
    "github.com/zeromicro/go-zero/core/stringx"
)

var (
    permissionFieldNames          = builder.RawFieldNames(&Permission{})
    permissionRows                = strings.Join(permissionFieldNames, ",")
    permissionRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
    permissionRowsWithPlaceHolder = strings.Join(stringx.Remove(permissionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
    permissionModel interface {
        Insert(ctx context.Context, data *Permission) (sql.Result, error)
        FindOne(ctx context.Context, id int64) (*Permission, error)
        Update(ctx context.Context, data *Permission) error
        Delete(ctx context.Context, id int64) error
    }

    defaultPermissionModel struct {
        conn  sqlx.SqlConn
        table string
    }

    Permission struct {
        Id               int64          `db:"id"`
        ParentId         int64          `db:"parent_id"` // 父级
        Name             string         `db:"name"`      // 权限名称
        ApiUrl           string         `db:"api_url"`   // api地址
        Code             string         `db:"code"`
        PermissionButton sql.NullString `db:"permission_button"` // 权限按钮
        PermissionData   sql.NullString `db:"permission_data"`   // 权限数据
        Info             string         `db:"info"`
        Status           int64          `db:"status"`    // 状态 0=开启 1=关闭
        IsDelete         int64          `db:"is_delete"` // 是否删 0=否 1=是
        CreateTime       time.Time      `db:"create_time"`
    }
)

func newPermissionModel(conn sqlx.SqlConn) *defaultPermissionModel {
    return &defaultPermissionModel{
        conn:  conn,
        table: "`permission`",
    }
}

func (m *defaultPermissionModel) Delete(ctx context.Context, id int64) error {
    query := fmt.Sprintf("delete from %s where `id` = ? and is_delete=1", m.table)
    _, err := m.conn.ExecCtx(ctx, query, id)
    return err
}

func (m *defaultPermissionModel) FindOne(ctx context.Context, id int64) (*Permission, error) {
    query := fmt.Sprintf("select %s from %s where `id` = ? and is_delete=0 limit 1", permissionRows, m.table)
    var resp Permission
    err := m.conn.QueryRowCtx(ctx, &resp, query, id)
    switch err {
    case nil:
        return &resp, nil
    case sqlc.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *defaultPermissionModel) Insert(ctx context.Context, data *Permission) (sql.Result, error) {
    query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, permissionRowsExpectAutoSet)
    ret, err := m.conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.ApiUrl, data.Code, data.PermissionButton, data.PermissionData, data.Info, data.Status, data.IsDelete)
    return ret, err
}

func (m *defaultPermissionModel) Update(ctx context.Context, data *Permission) error {
    query := fmt.Sprintf("update %s set %s where `id` = ? and is_delete=0 ", m.table, permissionRowsWithPlaceHolder)
    _, err := m.conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.ApiUrl, data.Code, data.PermissionButton, data.PermissionData, data.Info, data.Status, data.IsDelete, data.Id)
    return err
}

func (m *defaultPermissionModel) tableName() string {
    return m.table
}
