// Code generated by goctl. DO NOT EDIT!

package group

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminRoleGroupFieldNames          = builder.RawFieldNames(&AdminRoleGroup{})
	adminRoleGroupRows                = strings.Join(adminRoleGroupFieldNames, ",")
	adminRoleGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(adminRoleGroupFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminRoleGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(adminRoleGroupFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	adminRoleGroupModel interface {
		Insert(ctx context.Context, data *AdminRoleGroup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminRoleGroup, error)
		Update(ctx context.Context, data *AdminRoleGroup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminRoleGroupModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminRoleGroup struct {
		Id       int64 `db:"id"`
		AdminId  int64 `db:"admin_id"`
		RoleId   int64 `db:"role_id"`
		Status   int64 `db:"status"`    // 状态 0=开启 1=关闭
		IsDelete int64 `db:"is_delete"` // 是否删 0=否 1=是
	}
)

func newAdminRoleGroupModel(conn sqlx.SqlConn) *defaultAdminRoleGroupModel {
	return &defaultAdminRoleGroupModel{
		conn:  conn,
		table: "`admin_role_group`",
	}
}

func (m *defaultAdminRoleGroupModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ? and is_delete=1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminRoleGroupModel) FindOne(ctx context.Context, id int64) (*AdminRoleGroup, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and is_delete=0 limit 1", adminRoleGroupRows, m.table)
	var resp AdminRoleGroup
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminRoleGroupModel) Insert(ctx context.Context, data *AdminRoleGroup) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, adminRoleGroupRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AdminId, data.RoleId, data.Status, data.IsDelete)
	return ret, err
}

func (m *defaultAdminRoleGroupModel) Update(ctx context.Context, data *AdminRoleGroup) error {
	query := fmt.Sprintf("update %s set %s where `id` = ? and is_delete=0", m.table, adminRoleGroupRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AdminId, data.RoleId, data.Status, data.IsDelete, data.Id)
	return err
}

func (m *defaultAdminRoleGroupModel) tableName() string {
	return m.table
}
