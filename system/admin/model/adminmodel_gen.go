// Code generated by goctl. DO NOT EDIT!

package model

import (
    "context"
    "database/sql"
    "fmt"
    "strings"
    "time"

    "github.com/zeromicro/go-zero/core/stores/builder"
    "github.com/zeromicro/go-zero/core/stores/cache"
    "github.com/zeromicro/go-zero/core/stores/sqlc"
    "github.com/zeromicro/go-zero/core/stores/sqlx"
    "github.com/zeromicro/go-zero/core/stringx"
)

var (
    adminFieldNames          = builder.RawFieldNames(&Admin{})
    adminRows                = strings.Join(adminFieldNames, ",")
    adminRowsExpectAutoSet   = strings.Join(stringx.Remove(adminFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
    adminRowsWithPlaceHolder = strings.Join(stringx.Remove(adminFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

    cacheGoZeroAgileAdminIdPrefix = "cache:goZeroAgile:admin:id:"
)

type (
    adminModel interface {
        Insert(ctx context.Context, data *Admin) (sql.Result, error)
        FindOne(ctx context.Context, id uint64) (*Admin, error)
        Update(ctx context.Context, data *Admin) error
        Delete(ctx context.Context, id uint64) error
    }

    defaultAdminModel struct {
        sqlc.CachedConn
        table string
    }

    Admin struct {
        Id         uint64    `db:"id"`
        Name       string    `db:"name"`        // 用户名
        Password   string    `db:"password"`    // 密码
        Gender     uint32    `db:"gender"`      // 性别 0=女 1=男 2=保密
        Phone      string    `db:"phone"`       // 手机号
        Email      string    `db:"email"`       // 邮箱
        Status     uint32    `db:"status"`      // 状态 0=启用 1=禁用
        IsDelete   uint32    `db:"is_delete"`   // 是否删除 0=否 1=是
        CreateTime time.Time `db:"create_time"` // 创建时间
        UpdateTime time.Time `db:"update_time"` // 更新时间
    }
)

func newAdminModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAdminModel {
    return &defaultAdminModel{
        CachedConn: sqlc.NewConn(conn, c),
        table:      "`admin`",
    }
}

func (m *defaultAdminModel) Delete(ctx context.Context, id uint64) error {
    goZeroAgileAdminIdKey := fmt.Sprintf("%s%v", cacheGoZeroAgileAdminIdPrefix, id)
    _, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
        query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
        return conn.ExecCtx(ctx, query, id)
    }, goZeroAgileAdminIdKey)
    return err
}

func (m *defaultAdminModel) FindOne(ctx context.Context, id uint64) (*Admin, error) {
    goZeroAgileAdminIdKey := fmt.Sprintf("%s%v", cacheGoZeroAgileAdminIdPrefix, id)
    var resp Admin
    err := m.QueryRowCtx(ctx, &resp, goZeroAgileAdminIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
        query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminRows, m.table)
        return conn.QueryRowCtx(ctx, v, query, id)
    })
    switch err {
    case nil:
        return &resp, nil
    case sqlc.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *defaultAdminModel) Insert(ctx context.Context, data *Admin) (sql.Result, error) {
    goZeroAgileAdminIdKey := fmt.Sprintf("%s%v", cacheGoZeroAgileAdminIdPrefix, data.Id)
    ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
        query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminRowsExpectAutoSet)
        return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Password, data.Gender, data.Phone, data.Email, data.Status, data.IsDelete)
    }, goZeroAgileAdminIdKey)
    return ret, err
}

func (m *defaultAdminModel) Update(ctx context.Context, data *Admin) error {
    goZeroAgileAdminIdKey := fmt.Sprintf("%s%v", cacheGoZeroAgileAdminIdPrefix, data.Id)
    _, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
        query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminRowsWithPlaceHolder)
        return conn.ExecCtx(ctx, query, data.Name, data.Password, data.Gender, data.Phone, data.Email, data.Status, data.IsDelete, data.Id)
    }, goZeroAgileAdminIdKey)
    return err
}

func (m *defaultAdminModel) formatPrimary(primary interface{}) string {
    return fmt.Sprintf("%s%v", cacheGoZeroAgileAdminIdPrefix, primary)
}

func (m *defaultAdminModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
    query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminRows, m.table)
    return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminModel) tableName() string {
    return m.table
}
