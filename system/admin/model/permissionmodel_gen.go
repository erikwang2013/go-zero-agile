// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	permissionFieldNames          = builder.RawFieldNames(&Permission{})
	permissionRows                = strings.Join(permissionFieldNames, ",")
	permissionRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	permissionRowsWithPlaceHolder = strings.Join(stringx.Remove(permissionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cachePermissionIdPrefix = "cache:permission:id:"
)

type (
	permissionModel interface {
		Insert(ctx context.Context, data *Permission) (sql.Result, error)
		FindOne(ctx context.Context, id int) (*Permission, error)
		Update(ctx context.Context, data *Permission) error
		Delete(ctx context.Context, id int) error
	}

	defaultPermissionModel struct {
		sqlc.CachedConn
		table string
	}

	Permission struct {
		Id               int          `db:"id"`
		ParentId         int          `db:"parent_id"` // 父级
		Name             string         `db:"name"`      // 权限名称
		ApiUrl           string         `db:"api_url"`   // api地址
		Code             string         `db:"code"`
		PermissionButton sql.NullString `db:"permission_button"` // 权限按钮
		PermissionData   sql.NullString `db:"permission_data"`   // 权限数据
		Info             string         `db:"info"`
		Status           int8          `db:"status"`    // 状态 0=开启 1=关闭
		IsDelete         int8          `db:"is_delete"` // 是否删 0=否 1=是
		CreateTime       time.Time      `db:"create_time"`
	}
)

func newPermissionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPermissionModel {
	return &defaultPermissionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`permission`",
	}
}

func (m *defaultPermissionModel) Delete(ctx context.Context, id int) error {
	permissionIdKey := fmt.Sprintf("%s%v", cachePermissionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, permissionIdKey)
	return err
}

func (m *defaultPermissionModel) FindOne(ctx context.Context, id int) (*Permission, error) {
	permissionIdKey := fmt.Sprintf("%s%v", cachePermissionIdPrefix, id)
	var resp Permission
	err := m.QueryRowCtx(ctx, &resp, permissionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", permissionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionModel) Insert(ctx context.Context, data *Permission) (sql.Result, error) {
	permissionIdKey := fmt.Sprintf("%s%v", cachePermissionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, permissionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ParentId, data.Name, data.ApiUrl, data.Code, data.PermissionButton, data.PermissionData, data.Info, data.Status, data.IsDelete)
	}, permissionIdKey)
	return ret, err
}

func (m *defaultPermissionModel) Update(ctx context.Context, data *Permission) error {
	permissionIdKey := fmt.Sprintf("%s%v", cachePermissionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, permissionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.ApiUrl, data.Code, data.PermissionButton, data.PermissionData, data.Info, data.Status, data.IsDelete, data.Id)
	}, permissionIdKey)
	return err
}

func (m *defaultPermissionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePermissionIdPrefix, primary)
}

func (m *defaultPermissionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", permissionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPermissionModel) tableName() string {
	return m.table
}
